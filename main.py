import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import os
from loguru import logger
import aiosqlite

class QuestionState(StatesGroup):
    waiting_for_question = State()

bot = Bot(token="7725790114:AAHKNSmlTerFoDfoRKIhy0z1vyVGuXvrOuE")
dp = Dispatcher(storage=MemoryStorage())

QUESTIONS_CHANNEL_ID = -1002073621043
LOGS_CHANNEL_ID = -1002455396764
DB_PATH = 'bot_database.db'

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
        CREATE TABLE IF NOT EXISTS banned_users (
            user_id INTEGER PRIMARY KEY,
            banned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        await db.commit()

async def ban_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('INSERT OR REPLACE INTO banned_users (user_id) VALUES (?)', (user_id,))
        await db.commit()

async def is_user_banned(user_id: int) -> bool:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('SELECT user_id FROM banned_users WHERE user_id = ?', (user_id,)) as cursor:
            return await cursor.fetchone() is not None

async def is_user_in_channel(user_id: int) -> bool:
    member = await bot.get_chat_member(QUESTIONS_CHANNEL_ID, user_id)
    return member.status in ['member', 'administrator', 'creator']
#    return True
async def unban_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('DELETE FROM banned_users WHERE user_id = ?', (user_id,))
        await db.commit()

async def log_to_channel(user: types.User, message_text: str, action: str, message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", url=f"tg://user?id={user.id}")
    ], [
        InlineKeyboardButton(text="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"ban_{user.id}")
    ]])

    log_message = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (ID: {user.id})\n"
        f"Username: @{user.username}\n"
        f"–î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n"
        f"–í—Ä–µ–º—è: {message.date.strftime('%Y-%m-%d %H:%M:%S')}"
    )

    await bot.send_message(
        chat_id=LOGS_CHANNEL_ID,
        text=log_message,
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data and c.data.startswith('ban_'))
async def process_ban_callback(callback: types.CallbackQuery):
    user_id = int(callback.data.split('_')[1])
    await ban_user(user_id)
    await callback.answer(text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
    await bot.send_message(LOGS_CHANNEL_ID, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω")

@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    if await is_user_banned(message.from_user.id):
        await message.answer("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    if not await is_user_in_channel(message.from_user.id):
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    await state.set_state(QuestionState.waiting_for_question)
    await log_to_channel(message.from_user, message.text, "–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", message)

@dp.message(QuestionState.waiting_for_question, F.text)
async def handle_question(message: types.Message, state: FSMContext):
    if await is_user_banned(message.from_user.id):
        await message.answer("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    if not await is_user_in_channel(message.from_user.id):
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return
    if message.text.startswith("/start"):
        await message.reply("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å!")
        return
    formatted_question = f"‚ùì –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n\n<blockquote expandable>{message.text}</blockquote>"
    await bot.send_message(
        chat_id=QUESTIONS_CHANNEL_ID,
        text=formatted_question,
        parse_mode="HTML"
    )
    await log_to_channel(message.from_user, message.text, "–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å", message)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ.\n\n–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!")

@dp.message(QuestionState.waiting_for_question, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    if await is_user_banned(message.from_user.id):
        await message.answer("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    if not await is_user_in_channel(message.from_user.id):
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return
    photo = message.photo[-1]
    caption = message.caption if message.caption else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"

    await bot.send_photo(
        chat_id=QUESTIONS_CHANNEL_ID,
        photo=photo.file_id,
        caption=f"‚ùì –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å —Ñ–æ—Ç–æ:\n\n{caption}"
    )

    await log_to_channel(message.from_user, f"[–§–æ—Ç–æ] {caption}", "–û—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ", message)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ.\n\n–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!")

@dp.message(QuestionState.waiting_for_question, F.voice)
async def handle_voice(message: types.Message, state: FSMContext):
    if await is_user_banned(message.from_user.id):
        await message.answer("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    if not await is_user_in_channel(message.from_user.id):
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return
    await bot.send_voice(
        chat_id=QUESTIONS_CHANNEL_ID,
        voice=message.voice.file_id,
        caption="‚ùì –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å"
    )

    await log_to_channel(message.from_user, "[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]", "–û—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ", message)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ.\n\n–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!")

@dp.message(QuestionState.waiting_for_question, F.video_note)
async def handle_video_note(message: types.Message, state: FSMContext):
    if await is_user_banned(message.from_user.id):
        await message.answer("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    if not await is_user_in_channel(message.from_user.id):
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return
    await bot.send_video_note(
        chat_id=QUESTIONS_CHANNEL_ID,
        video_note=message.video_note.file_id
    )

    await log_to_channel(message.from_user, "[–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ]", "–û—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ", message)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ.\n\n–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!")

@dp.message(QuestionState.waiting_for_question, F.sticker)
async def handle_sticker(message: types.Message, state: FSMContext):
    if await is_user_banned(message.from_user.id):
        await message.answer("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    if not await is_user_in_channel(message.from_user.id):
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return
    await bot.send_sticker(
        chat_id=QUESTIONS_CHANNEL_ID,
        sticker=message.sticker.file_id
    )

    await log_to_channel(message.from_user, "[–°—Ç–∏–∫–µ—Ä]", "–û—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä", message)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π —Å—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ.\n\n–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!")

@dp.message(QuestionState.waiting_for_question, F.video)
async def handle_video(message: types.Message, state: FSMContext):
    if await is_user_banned(message.from_user.id):
        await message.answer("–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    if not await is_user_in_channel(message.from_user.id):
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return
    caption = message.caption if message.caption else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"

    await bot.send_video(
        chat_id=QUESTIONS_CHANNEL_ID,
        video=message.video.file_id,
        caption=f"‚ùì –ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å –≤–∏–¥–µ–æ:\n\n{caption}"
    )

    await log_to_channel(message.from_user, f"[–í–∏–¥–µ–æ] {caption}", "–û—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ", message)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ.\n\n–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!")

async def main():
    logger.info("Bot starting")
    await init_db()
    await bot.send_message(chat_id=LOGS_CHANNEL_ID, text="üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
